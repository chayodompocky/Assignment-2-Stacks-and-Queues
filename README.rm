โปรแกรม `bracket_check` ถูกสร้างขึ้นเพื่อตรวจสอบการจับคู่เครื่องหมายวงเล็บแบบ ( ), { }, และ [ ]. โดยอัลกอริทึมนี้ใช้กำหนดคู่หรือคู่เปิด-ปิดของเครื่องหมายวงเล็บและตรวจสอบว่ามีข้อผิดพลาดใด ๆ หรือไม่ หรือแม้กระทั่ง "Hello" ที่ไม่ได้กำหนดเครื่องหมายวงเล็บใด ๆ ในบรรทัดเดียวกัน

กลไกการทำงาน:
1. เริ่มต้นด้วยการสร้าง Stack ว่างและรายชื่อว่างเพื่อเก็บข้อมูลข้อผิดพลาดที่พบ.
2. กำหนดคู่หรือคู่เปิด-ปิดของเครื่องหมายวงเล็บด้วยพจนานุกรม `brackets`.
3. คราวแรกในการวนลูปของสตริงที่ให้มา:
   - หากพบเครื่องหมายเปิดให้นำเครื่องหมายนั้นเข้า Stack พร้อมกับตำแหน่งของเครื่องหมาย.
   - หากพบเครื่องหมายปิด:
     - หาก Stack ว่างอยู่ แสดงว่ามีเครื่องหมายปิดที่ไม่มีเครื่องหมายเปิดที่ตรงกัน และเพิ่มข้อมูลข้อผิดพลาดในรายชื่อ.
     - หาก Stack ไม่ว่าง:
       - นำเครื่องหมายที่อยู่ที่ด้านบนของ Stack และตำแหน่งของมัน ออกจาก Stack และเปรียบเทียบกับคู่เปิดของเครื่องหมายปิดนั้น:
         - หากไม่ตรงกัน ให้เพิ่มข้อมูลข้อผิดพลาดในรายชื่อ.
4. หลังจากวนลูปสตริงเสร็จสิ้น:
   - ตรวจสอบว่า Stack ยังมีเครื่องหมายเปิดที่ไม่มีเครื่องหมายปิดที่ตรงกัน และเพิ่มข้อมูลข้อผิดพลาดในรายชื่อ.

การทดสอบ:
- กลไกการทำงานของ `bracket_check` ถูกทดสอบโดยใช้ไลบรารี `unittest` โดยมีทั้งหมด 4 กรณีทดสอบ:
  1. `test_no_error`: ตรวจสอบว่าสตริงที่ไม่มีข้อผิดพลาดใด ๆ ในเครื่องหมายวงเล็บและ "Hello" ทำงานได้อย่างถูกต้อง และไม่มีข้อผิดพลาดที่ถูกพบ.
  2. `test_error_1`: ตรวจสอบว่าสตริงที่มีข้อผิดพลาดที่เป็นการปิดเครื่องหมาย '}' โดยไม่มีเครื่องหมายเปิดที่ตรงกัน จะพบข้อผิดพลาด.
  3. `test_error_2`: ตรวจสอบว่าสตริงที่มีข้อผิดพลาดที่มีการปิดเครื่องหมาย ']' แล

ะ '}' โดยไม่มีเครื่องหมายเปิดที่ตรงกัน จะพบข้อผิดพลาด.
  4. `test_error_3`: ตรวจสอบว่าสตริงที่มีข้อผิดพลาดที่มี "Hello" และเครื่องหมาย '(' โดยไม่มีเครื่องหมายปิดที่ตรงกัน จะพบข้อผิดพลาด.
- ผลลัพธ์ของการทดสอบจะแสดงข้อผิดพลาดที่พบในรายชื่อของรายการทดสอบแต่ละกรณี และผ่านทุกกรณีทดสอบเมื่อรายชื่อของข้อผิดพลาดถูกตรวจสอบว่าตรงกันกับข้อผิดพลาดที่คาดหวัง หากไม่ตรงกัน ระบบจะแสดงข้อผิดพลาดและสร้างการแจ้งเตือนแสดงความผิดพลาดที่พบในรายชื่อข้อผิดพลาด.
